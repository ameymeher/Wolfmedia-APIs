CREATE TABLE SERVICE_CENTER (
    SERVICE_CENTER_ID INTEGER,
    ADDRESS VARCHAR(250) NOT NULL,
    TELEPHONE_NO VARCHAR(15) NOT NULL,
    OPERATIONAL_STATUS INTEGER NOT NULL,
    WEEKEND_WORKING INTEGER NOT NULL,
    MIN_WAGE INTEGER NOT NULL,
    MAX_WAGE INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_CENTER_ID),
    CHECK (OPERATIONAL_STATUS IN (0, 1)),
    CHECK (WEEKEND_WORKING IN (0, 1))
);
CREATE TABLE CAR (
    CAR_ID INTEGER,
    MANUFACTURER VARCHAR(250) NOT NULL,
    YEAR INTEGER NOT NULL,
    CHECK (
        1900 <= YEAR
        AND YEAR <= 2022
    ),
    PRIMARY KEY (CAR_ID)
);
CREATE TABLE CUSTOMER (
    CUSTOMER_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    FIRST_NAME VARCHAR(250) NOT NULL,
    LAST_NAME VARCHAR(250) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    ADDRESS VARCHAR(250) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    STATUS INTEGER NOT NULL,
    PRIMARY KEY (CUSTOMER_ID, SERVICE_CENTER_ID),
    CHECK (STATUS IN (0, 1)),
    FOREIGN KEY (SERVICE_CENTER_ID) REFERENCES SERVICE_CENTER(SERVICE_CENTER_ID) ON DELETE CASCADE,
    CHECK (EMAIL LIKE '%@%.%')
);
CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    NAME VARCHAR(250) NOT NULL,
    ADDRESS VARCHAR(250) NOT NULL,
    START_DATE DATE NOT NULL,
    ROLE INTEGER NOT NULL,
    EMAIL VARCHAR(100) NOT NULL,
    PHONE VARCHAR(14) NOT NULL,
    USERNAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    PRIMARY KEY (EMPLOYEE_ID, SERVICE_CENTER_ID),
    CHECK (ROLE IN (1, 2, 3)),
    FOREIGN KEY (SERVICE_CENTER_ID) REFERENCES SERVICE_CENTER(SERVICE_CENTER_ID) ON DELETE CASCADE,
    CHECK (EMAIL LIKE '%@%.%')
);
CREATE TABLE CUSTOMER_CAR (
    VIN INTEGER,
    MILEAGE REAL NOT NULL,
    LAST_SCHEDULED_MAINTENANCE INTEGER NOT NULL,
    CUSTOMER_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    CAR_ID INTEGER,
    FOREIGN KEY (CUSTOMER_ID, SERVICE_CENTER_ID) REFERENCES CUSTOMER(CUSTOMER_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    FOREIGN KEY (CAR_ID) REFERENCES CAR(CAR_ID) ON DELETE CASCADE,
    PRIMARY KEY (VIN)
);
CREATE TABLE SALARIED_EMPLOYEE (
    EMPLOYEE_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    SALARY REAL NOT NULL,
    FOREIGN KEY (EMPLOYEE_ID, SERVICE_CENTER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    PRIMARY KEY (EMPLOYEE_ID, SERVICE_CENTER_ID)
);
CREATE TABLE HOURLY_PAID_EMPLOYEE (
    EMPLOYEE_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    HOURLY_RATE REAL NOT NULL,
    FOREIGN KEY (EMPLOYEE_ID, SERVICE_CENTER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    PRIMARY KEY (EMPLOYEE_ID, SERVICE_CENTER_ID)
);
CREATE TABLE LEAVE (
    LEAVE_ID INTEGER,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    STATUS INTEGER NOT NULL,
    EMPLOYEE_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    CHECK (STATUS IN (0, 1, 2)),
    CHECK (START_DATE < END_DATE),
    FOREIGN KEY (EMPLOYEE_ID, SERVICE_CENTER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    PRIMARY KEY (LEAVE_ID, SERVICE_CENTER_ID)
);
CREATE TABLE SWAP_SLOT (
    REQUESTOR_EMPLOYEE_ID INTEGER,
    REQUESTOR_SERVICE_CENTER_ID INTEGER,
    REQUESTED_EMPLOYEE_ID INTEGER,
    REQUESTED_SERVICE_CENTER_ID INTEGER,
    TIME_SLOT_GIVE DATE NOT NULL,
    TIME_SLOT_TAKE DATE NOT NULL,
    STATUS INTEGER NOT NULL,
    CHECK (STATUS IN (0, 1, 2)),
    FOREIGN KEY (
        REQUESTOR_EMPLOYEE_ID,
        REQUESTOR_SERVICE_CENTER_ID
    ) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    FOREIGN KEY (
        REQUESTED_EMPLOYEE_ID,
        REQUESTED_SERVICE_CENTER_ID
    ) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    PRIMARY KEY (
        REQUESTOR_EMPLOYEE_ID,
        REQUESTOR_SERVICE_CENTER_ID,
        REQUESTED_EMPLOYEE_ID,
        REQUESTED_SERVICE_CENTER_ID
    )
);
CREATE TABLE SCHEDULE_BUNDLE (
    SCHEDULE_BUNDLE_ID INTEGER,
    NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY (SCHEDULE_BUNDLE_ID)
);
CREATE TABLE SERVICE_CATEGORY (
    CATEGORY_ID INTEGER,
    CATEGORY_NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY (CATEGORY_ID)
);
CREATE TABLE SERVICE (
    ID INTEGER,
    SERVICE_NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID)
);
CREATE TABLE SERVICES_CAR (
    ID INTEGER,
    CAR_ID INTEGER,
    TIME_ESTIMATED REAL NOT NULL,
    FOREIGN KEY (ID) REFERENCES SERVICE(ID) ON DELETE CASCADE,
    FOREIGN KEY (CAR_ID) REFERENCES CAR(CAR_ID) ON DELETE CASCADE,
    PRIMARY KEY (ID, CAR_ID)
);
CREATE TABLE SERVICE_CENTER_PROVIDES_SERVICE (
    SERVICE_CENTER_ID INTEGER,
    ID INTEGER,
    CAR_ID INTEGER,
    PRICE REAL NOT NULL,
    FOREIGN KEY (ID) REFERENCES SERVICE(ID) ON DELETE CASCADE,
    FOREIGN KEY (CAR_ID) REFERENCES CAR(CAR_ID) ON DELETE CASCADE,
    FOREIGN KEY (SERVICE_CENTER_ID) REFERENCES SERVICE_CENTER(SERVICE_CENTER_ID) ON DELETE CASCADE,
    PRIMARY KEY (SERVICE_CENTER_ID, ID, CAR_ID)
);
CREATE TABLE REPAIR_SERVICE (
    ID INTEGER,
    CATEGORY_ID INTEGER,
    FOREIGN KEY (ID) REFERENCES SERVICE(ID) ON DELETE CASCADE,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SERVICE_CATEGORY(CATEGORY_ID) ON DELETE CASCADE,
    PRIMARY KEY (ID, CATEGORY_ID)
);
CREATE TABLE MAINTENANCE_SERVICE (
    ID INTEGER,
    SCHEDULE_BUNDLE_ID INTEGER,
    FOREIGN KEY (ID) REFERENCES SERVICE(ID) ON DELETE CASCADE,
    FOREIGN KEY (SCHEDULE_BUNDLE_ID) REFERENCES SCHEDULE_BUNDLE(SCHEDULE_BUNDLE_ID) ON DELETE CASCADE,
    PRIMARY KEY (ID, SCHEDULE_BUNDLE_ID)
);
CREATE TABLE INVOICE (
    INVOICE_ID INTEGER,
    INVOICE_STATUS INTEGER NOT NULL,
    TOTAL_COST REAL NOT NULL,
    CHECK (INVOICE_STATUS IN (0, 1)),
    PRIMARY KEY (INVOICE_ID)
);
CREATE TABLE SERVICE_EVENT (
    SERVICE_ID INTEGER,
    ID INTEGER,
    MECHANIC_ID INTEGER,
    SERVICE_CENTER_ID INTEGER,
    VIN INTEGER,
    INVOICE_ID INTEGER,
    START_TIME TIMESTAMP,
    END_TIME TIMESTAMP,
    FOREIGN KEY (ID) REFERENCES SERVICE(ID),
    FOREIGN KEY (MECHANIC_ID, SERVICE_CENTER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID),
    FOREIGN KEY (VIN) REFERENCES CUSTOMER_CAR(VIN),
    FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE(INVOICE_ID),
    PRIMARY KEY (SERVICE_ID)
);
CREATE TABLE SWAP_SLOT (
    REQUESTOR_EMPLOYEE_ID INTEGER,
    REQUESTOR_SERVICE_CENTER_ID INTEGER,
    REQUESTED_EMPLOYEE_ID INTEGER,
    REQUESTED_SERVICE_CENTER_ID INTEGER,
    INVOICE_GIVE INTEGER,
    INVOICE_TAKE INTEGER,
    STATUS INTEGER NOT NULL,
    CHECK (STATUS IN (0, 1, 2)),
    FOREIGN KEY (
        REQUESTOR_EMPLOYEE_ID,
        REQUESTOR_SERVICE_CENTER_ID
    ) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    FOREIGN KEY (
        REQUESTED_EMPLOYEE_ID,
        REQUESTED_SERVICE_CENTER_ID
    ) REFERENCES EMPLOYEE(EMPLOYEE_ID, SERVICE_CENTER_ID) ON DELETE CASCADE,
    FOREIGN KEY (INVOICE_GIVE) REFERENCES INVOICE(INVOICE_ID),
    FOREIGN KEY (INVOICE_TAKE) REFERENCES INVOICE(INVOICE_ID),
    PRIMARY KEY (
        REQUESTOR_EMPLOYEE_ID,
        REQUESTOR_SERVICE_CENTER_ID,
        REQUESTED_EMPLOYEE_ID,
        REQUESTED_SERVICE_CENTER_ID
    )
);
create or replace TRIGGER VERIFY_WAGE_IS_IN_LIMIT BEFORE
UPDATE OF hourly_rate ON HOURLY_PAID_EMPLOYEE FOR EACH ROW
DECLARE maxWage REAL;
minWage REAL;
BEGIN
SELECT SC.MAX_WAGE into maxWage
FROM SERVICE_CENTER SC
WHERE SC.service_center_id = :new.service_center_id;
SELECT SC.MIN_WAGE into minWage
FROM SERVICE_CENTER SC
WHERE SC.service_center_id = :new.service_center_id;
IF :new.hourly_rate > maxWage
OR :new.hourly_rate < minWage THEN :new.hourly_rate := :old.hourly_rate;
END IF;
END;
create or replace TRIGGER UPDATE_SERVICE_CENTER_STATUS BEFORE
INSERT ON EMPLOYEE FOR EACH ROW
    WHEN (new.ROLE = 3)
DECLARE totalMechanics INT;
BEGIN
SELECT Count(*) into totalMechanics
FROM EMPLOYEE E
WHERE E.service_center_id = :new.service_center_id;
IF totalMechanics >= 3 THEN
UPDATE SERVICE_CENTER SC
SET SC.operational_status = 1
WHERE SC.service_center_id = :new.service_center_id;
END IF;
END;
create or replace TRIGGER CHECK_CUSTOMER_STATUS
AFTER
INSERT ON CUSTOMER_CAR FOR EACH ROW BEGIN
UPDATE CUSTOMER C
SET C.status = 1
WHERE C.customer_id = :new.customer_id
    AND C.service_center_id = :new.service_center_id;
END;
create or replace TRIGGER INSERT_SERVICE_CENTER_PROVIDES_SERVICE
AFTER
INSERT ON SERVICE FOR EACH ROW
DECLARE serviceCenter SERVICE_CENTER.service_center_id %type;
CURSOR serviceCenterCursor is
select SC.SERVICE_CENTER_ID
from SERVICE_CENTER SC;
BEGIN OPEN serviceCenterCursor;
LOOP FETCH serviceCenterCursor INTO serviceCenter;
EXIT
WHEN serviceCenterCursor %NOTFOUND;
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (serviceCenter, :new.id, 1, 100);
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (serviceCenter, :new.id, 2, 100);
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (serviceCenter, :new.id, 3, 100);
END LOOP;
CLOSE serviceCenterCursor;
END;
create or replace TRIGGER INSERT_SERVICE_CENTER_PROVIDES_SERVICE_ON_ADDING_SERVICE_CENTER
AFTER
INSERT ON SERVICE_CENTER FOR EACH ROW
DECLARE serviceId SERVICE.id %type;
CURSOR serviceCursor is
select S.id
from SERVICE S;
BEGIN OPEN serviceCursor;
LOOP FETCH serviceCursor INTO serviceId;
EXIT
WHEN serviceCursor %NOTFOUND;
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (:new.service_center_id, serviceId, 1, 100);
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (:new.service_center_id, serviceId, 2, 100);
INSERT INTO SERVICE_CENTER_PROVIDES_SERVICE
VALUES (:new.service_center_id, serviceId, 3, 100);
END LOOP;
CLOSE serviceCursor;
END;
create or replace TRIGGER AUTO_APPROVE_LEAVE BEFORE
INSERT ON LEAVE FOR EACH ROW BEGIN :new.status := 1;
END;
create or replace TRIGGER ON_SWAP_SLOT_APPROVE
AFTER
UPDATE ON SWAP_SLOT FOR EACH ROW
    WHEN (new.status = 1) BEGIN
UPDATE SERVICE_EVENT SE
SET SE.mechanic_id = :new.requested_employee_id
WHERE :new.requestor_employee_id = SE.mechanic_id
    AND :new.invoice_give = SE.invoice_id;
UPDATE SERVICE_EVENT SE
SET SE.mechanic_id = :new.requestor_employee_id
WHERE :new.requested_employee_id = SE.mechanic_id
    AND :new.invoice_take = SE.invoice_id;
END;